@page "/"
@using GrocyScanner.Service
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Mvc.TagHelpers
@namespace GrocyScanner.Service.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="~/"/>
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css"/>
    <link href="css/site.css" rel="stylesheet"/>
    <link href="GrocyScanner.styles.css" rel="stylesheet"/>
    <link rel="icon" type="image/png" href="favicon.png"/>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered"/>
</head>
<body>
<component type="typeof(App)" render-mode="ServerPrerendered"/>

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script src="_framework/blazor.server.js"></script>
<script src="_content/MudBlazor/MudBlazor.min.js"></script>
<script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>

<script>
function updateAvailableCameras() {
    console.log('received request to update available cameras');
    Html5Qrcode.getCameras().then(async devices => {
        if (devices && devices.length) {
            await fetch('/api/BarcodeScan/notify-cameras', {
                method: 'POST',
                body: JSON.stringify(devices),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        }
    });
}

let currentScanner;

async function onScanSuccess(decodedText, decodedResult) {
    console.log(`Decoded barcode to text ${decodedText}`, decodedResult);
    currentScanner.stop();
    await fetch('/api/barcodescan/notify', {
        method: 'POST',
        body: JSON.stringify({
            gtin: decodedText
        }),
        headers: {
            'Content-Type': 'application/json'
        }
    });
}

function startScanningWithCamera(cameraId) {
    console.log('starting reader with camera', cameraId);
    currentScanner = new Html5Qrcode("reader");
    currentScanner.start(cameraId, {
        fps: 10,
        qrbox: {
            width: 250,
            height: 250
        }
    },
    (decodedText, decodedResult) => {
        onScanSuccess(decodedText, decodedResult);
    },
    (errorMessage) => {
        console.log(errorMessage);
        // parse error, ignore it.
    });
}
</script>

<script>
function openFullScreen() {
    window.document.documentElement.requestFullscreen();
}

function closeFullScreen() {
    window.document.exitFullscreen();
}
</script>
</body>
</html>